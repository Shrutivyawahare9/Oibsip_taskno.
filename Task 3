import pandas as pd

# Load the dataset
car_data = pd.read_csv("car data.csv")  # Replace with the path to your dataset

# Display the first few rows of the dataset
print(car_data.head())

# Check for missing values
print(car_data.isnull().sum())

# Drop rows with missing values (if any)
car_data = car_data.dropna()

# Convert categorical variables to numerical using one-hot encoding
car_data = pd.get_dummies(car_data, columns=['Fuel_Type', 'Selling_type', 'Transmission'])

# Feature engineering: Calculate the age of the car
car_data['Car_Age'] = 2024 - car_data['Year']

# Drop the 'Year' and 'Car_Name' columns as they are not needed for the model
car_data = car_data.drop(columns=['Year', 'Car_Name'])

# Split the data into features (X) and target variable (y)
X = car_data.drop(columns=['Selling_Price'])
y = car_data['Selling_Price']

import matplotlib.pyplot as plt
import seaborn as sns

# Plot the distribution of Selling_Price
plt.figure(figsize=(8, 6))
sns.histplot(car_data['Selling_Price'], kde=True, bins=20)
plt.title('Distribution of Selling Prices')
plt.xlabel('Selling Price (in lakhs)')
plt.ylabel('Frequency')
plt.show()

# Plot the correlation matrix
plt.figure(figsize=(12, 8))
sns.heatmap(car_data.corr(), annot=True, cmap='coolwarm')
plt.title('Correlation Matrix')
plt.show()

from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error, r2_score

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train a Random Forest Regressor model
model = RandomForestRegressor(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

# Make predictions on the testing data
y_pred = model.predict(X_test)

# Evaluate the model
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print(f"Mean Squared Error: {mse}")
print(f"R-squared: {r2}")

# Plot the actual vs predicted selling prices
plt.figure(figsize=(8, 6))
plt.scatter(y_test, y_pred)
plt.title('Actual vs Predicted Selling Prices')
plt.xlabel('Actual Selling Price (in lakhs)')
plt.ylabel('Predicted Selling Price (in lakhs)')
plt.grid(True)
plt.show()
